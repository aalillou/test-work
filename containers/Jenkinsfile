def registry = "composer-registry-30262-nexus-docker.composer-nexus.svc.cluster.local:6003"
def dirPath = "containers"
def tagChoice = ["latest", "timestamp"]
def imagesList = []

// ImagesList from directories in containers
def getImagesList(dir) {
   def list = sh (script: "ls -l ${dir} | grep '^d' | awk '{print \$NF}'", returnStdout: true).split( "\\r?\\n" ) as List;
    list = list.collect{ it.trim() }
    list.add('Build all')
    return list
}

def getImagesList2(dir) {
    sh "ls -l ${dir} | grep '^d' | awk '{print \$NF}' > _list"
    def list = readFile( "_list" ).split( "\\r?\\n" ) as List;
    sh "rm -f _list"
    list = list.collect{ it.trim() }
    list.add('Build all')
    return list
}


// Building build docker images with Kaniko
def kanikoBuildAndPush(registry, image, tag) {
    try {
        echo "Kaniko: building and pushing image: ${registry}/images/${image.trim()}:${tag} ... to Nexus"
    } catch(e) {
        println "kanikoBuildAndPush: Error occurred! - image: ${registry}/images/${image.trim()}:${tag}"
    }
}

def kanikoBuildAndPush2(registry, image, tag) {
    try {
        echo "Kaniko: building and pushing image: ${registry}/images/${image.trim()}:${tag} ... to Nexus"

        sh """#!/bin/sh
        CONTEXT=\$(pwd)/context
        mkdir -p /tmp/cache

        /kaniko/executor \
            --dockerfile="Dockerfile" \
            --cache="true" \
            --cache-dir="/tmp/cache" \
            --destination="${registry}/images/${image}:${tag}" \
            --context="dir://\$CONTEXT"
        """
        
    } catch(e) {
        println "kanikoBuildAndPush: Error occurred! - image: ${registry}/${image.trim()}:${tag}"
    }
}

pipeline {
    agent any

    options { 
        skipDefaultCheckout()
        timeout(time: 45, unit: 'MINUTES')
    }

    stages {
        stage('Checkout code') {
            steps {
                checkout scm
            }
        }
        stage('Select image and tag to build and push to registry') {
            steps {
                script {
                    imagesList = getImagesList(dirPath)
                    image = input message: "Select image (Dockerfile)", parameters: [choice(name: "image", choices: imagesList)]
                    tag = input message: "Select tag (latest)", parameters: [choice(name: "tag", choices: tagChoice)]
                    tag = tag != 'timestamp' ? tag : new Date().format("yyyyMMdd")

                    if (image != 'Build all') kanikoBuildAndPush (registry, image, tag) // <- Selected build
                    else {                                                              // <-- Selected build all
                        echo 'LOOPING - kanikoBuildAndPush'
                        try { 
                            imagesList[0..-2].each{ image -> // remove 'Build all' from list and loop
                                kanikoBuildAndPush (registry, image, tag)
                            }
                        } catch(e) {
                            println "Error occurred! LOOPING - kanikoBuildAndPush - image: ${registry}/images/${image}:${tag}"
                        }
                    }
                }
            }
        }
    }
}